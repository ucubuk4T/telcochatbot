{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport ChevronDown20 from '@carbon/icons-react/lib/chevron--down/20';\nimport { settings } from 'carbon-components';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nvar prefix = settings.prefix;\nvar SideNavSwitcher = React.forwardRef(function SideNavSwitcher(props, ref) {\n  var customClassName = props.className,\n      labelText = props.labelText,\n      onChange = props.onChange,\n      options = props.options;\n  var className = cx(\"\".concat(prefix, \"--side-nav__switcher\"), customClassName); // Note for usage around `onBlur`: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/no-onchange.md\n\n  return React.createElement(\"div\", {\n    className: className\n  }, React.createElement(\"label\", {\n    htmlFor: \"side-nav-switcher\",\n    className: \"\".concat(prefix, \"--assistive-text\")\n  }, labelText), React.createElement(\"select\", {\n    id: \"carbon-side-nav-switcher\",\n    className: \"\".concat(prefix, \"--side-nav__select\"),\n    defaultValue: \"\",\n    onBlur: onChange,\n    onChange: onChange,\n    ref: ref\n  }, React.createElement(\"option\", {\n    className: \"\".concat(prefix, \"--side-nav__option\"),\n    disabled: true,\n    hidden: true,\n    value: \"\"\n  }, labelText), options.map(function (option) {\n    return React.createElement(\"option\", {\n      key: option,\n      className: \"\".concat(prefix, \"--side-nav__option\"),\n      value: option\n    }, option);\n  })), React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--side-nav__switcher-chevron\")\n  }, React.createElement(ChevronDown20, null)));\n});\nSideNavSwitcher.propTypes = {\n  /**\n   * Provide an optional class to be applied to the containing node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Provide the label for the switcher. This will be the firt visible option\n   * when someone views this control\n   */\n  labelText: PropTypes.string.isRequired,\n\n  /**\n   * Provide a callback function that is called whenever the switcher value is\n   * updated\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Provide an array of options to be rendered in the switcher as an\n   * `<option>`. The text value will be what is displayed to the user and is set\n   * as the `value` prop for each `<option>`.\n   */\n  options: PropTypes.arrayOf(PropTypes.string).isRequired\n};\nexport default SideNavSwitcher;","map":null,"metadata":{},"sourceType":"module"}