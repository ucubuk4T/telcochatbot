{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport NavigationMenuPanel from './navigation-menu-panel';\nimport on from '../../globals/js/misc/on';\nimport settings from '../../globals/js/settings';\nimport onFocusOutByKeyboard from '../../globals/js/misc/on-focus-by-keyboard';\n\nvar ProductSwitcher =\n/*#__PURE__*/\nfunction (_NavigationMenuPanel) {\n  _inherits(ProductSwitcher, _NavigationMenuPanel);\n  /**\n   * A navigation menu\n   * @extends NavigationMenuPanel\n   * @param {HTMLElement} element The element working as a selector.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorInit] The CSS class to find product\n   * switchers\n   * @param {string} [options.attribInitTarget] The attribute name in the\n   * launcher buttons to find target product switcher\n   * @param {string} [options.classProductSwitcherExpanded] The CSS class\n   * for an expanded product switcher\n   */\n\n\n  function ProductSwitcher(element, options) {\n    var _this;\n\n    _classCallCheck(this, ProductSwitcher);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ProductSwitcher).call(this, element, options));\n    _this.current = '';\n    _this.triggerButtonIds = new Set();\n\n    _this._handleFocusOut = function (event) {\n      if (_this.element.contains(event.relatedTarget)) {\n        return;\n      }\n\n      var currentTriggerButton = _this.element.ownerDocument.getElementById(_this.current);\n\n      if (currentTriggerButton && event.relatedTarget && !event.relatedTarget.matches(_this.options.selectorFloatingMenus)) {\n        currentTriggerButton.focus();\n      }\n    };\n\n    _this._handleKeyDown = function (event) {\n      var isExpanded = !_this.element.hasAttribute('hidden');\n\n      if (event.which === 27 && isExpanded) {\n        var triggerButton = _this.current;\n\n        _this.changeState(_this.constructor.SELECT_NONE);\n\n        _this.element.ownerDocument.getElementById(triggerButton).focus();\n      }\n    };\n\n    _this.createdByLauncher = function (event) {\n      var isExpanded = _this.element.classList.contains(_this.options.classProductSwitcherExpanded);\n\n      var launcher = event.delegateTarget;\n\n      if (!launcher.id) {\n        launcher.id = \"__carbon-product-switcher-launcher-\".concat(Math.random().toString(36).substr(2));\n      }\n\n      var current = launcher.id;\n\n      _this.changeState(isExpanded && _this.current === current ? _this.constructor.SELECT_NONE : current);\n    };\n\n    _this.shouldStateBeChanged = function (current) {\n      return _this.current !== current;\n    };\n\n    _this._changeState = function (state, callback) {\n      _this.element.classList.toggle(_this.options.classProductSwitcherExpanded, state !== _this.constructor.SELECT_NONE);\n\n      _this.current = state;\n\n      if (_this.current !== _this.constructor.SELECT_NONE) {\n        _this.triggerButtonIds.add(_this.current);\n      } // deactivate all other trigger buttons\n\n\n      _this.triggerButtonIds.forEach(function (id) {\n        var button = _this.element.ownerDocument.getElementById(id);\n\n        var label = button.getAttribute(_this.options.attribLabelExpand);\n        button.classList.remove(_this.options.classNavigationMenuPanelHeaderActionActive);\n        button.setAttribute('aria-label', label);\n        button.setAttribute('title', label);\n      }); // set active trigger button attributes\n\n\n      var currentTriggerButton = _this.element.ownerDocument.getElementById(_this.current);\n\n      if (currentTriggerButton) {\n        var label = currentTriggerButton.getAttribute(_this.options.attribLabelCollapse);\n        currentTriggerButton.classList.toggle(_this.options.classNavigationMenuPanelHeaderActionActive);\n        currentTriggerButton.setAttribute('aria-label', label);\n        currentTriggerButton.setAttribute('title', label);\n      }\n\n      if (state !== _this.constructor.SELECT_NONE) {\n        _this.element.setAttribute('tabindex', '0');\n\n        _this.element.focus();\n      } else {\n        _this.element.setAttribute('tabindex', '-1');\n      }\n\n      callback();\n    };\n\n    _this.manage(on(element, 'keydown', _this._handleKeyDown));\n\n    _this.manage(onFocusOutByKeyboard(element, 'blur', _this._handleFocusOut));\n\n    return _this;\n  }\n  /**\n   * id of currently active trigger button\n   * @type {string}\n   */\n\n\n  _createClass(ProductSwitcher, [{\n    key: \"release\",\n    value: function release() {\n      this.triggerButtonIds.clear();\n      return _get(_getPrototypeOf(ProductSwitcher.prototype), \"release\", this).call(this);\n    }\n    /**\n     * The map associating DOM element and ProductSwitcher instance.\n     * @member ProductSwitcher.components\n     * @type {WeakMap}\n     */\n\n  }], [{\n    key: \"options\",\n\n    /**\n     * The component options.\n     * If `options` is specified in the constructor,\n     * {@linkcode ProductSwitcher.create .create()}, or\n     * {@linkcode ProductSwitcher.init .init()},\n     * properties in this object are overriden for the instance being create and\n     * how {@linkcode ProductSwitcher.init .init()} works.\n     * @member ProductSwitcher.options\n     * @type {Object}\n     * @property {string} selectorInit The CSS class to find popup navs.\n     * @property {string} attribInitTarget The attribute name in the\n     * launcher buttons to find target popup nav.\n     * @property {string[]} initEventNames The events that the component\n     * will handles\n     */\n    get: function get() {\n      var prefix = settings.prefix;\n      return Object.assign(Object.create(NavigationMenuPanel.options), {\n        selectorInit: '[data-product-switcher]',\n        selectorFloatingMenus: \"\\n        .\".concat(prefix, \"--overflow-menu-options,\\n        .\").concat(prefix, \"--overflow-menu-options *,\\n        .\").concat(prefix, \"--tooltip,\\n        .\").concat(prefix, \"--tooltip *,\\n        .flatpicker-calendar,\\n        .flatpicker-calendar *\\n        \"),\n        attribInitTarget: 'data-product-switcher-target',\n        classProductSwitcherExpanded: \"\".concat(prefix, \"--panel--expanded\")\n      });\n    }\n  }]);\n\n  ProductSwitcher.SELECT_NONE = '__carbon-product-switcher-launcher-NONE';\n  ProductSwitcher.components = new WeakMap();\n  return ProductSwitcher;\n}(NavigationMenuPanel);\n\nexport { ProductSwitcher as default };","map":null,"metadata":{},"sourceType":"module"}