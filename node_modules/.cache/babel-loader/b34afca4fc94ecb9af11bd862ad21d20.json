{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport cx from 'classnames';\nimport Downshift from 'downshift';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { settings } from 'carbon-components';\nimport WarningFilled16 from '@carbon/icons-react/lib/warning--filled/16';\nimport ListBox, { PropTypes as ListBoxPropTypes } from '../ListBox';\nvar prefix = settings.prefix;\n\nvar defaultItemToString = function defaultItemToString(item) {\n  if (typeof item === 'string') {\n    return item;\n  }\n\n  return item ? item.label : '';\n};\n\nvar Dropdown =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Dropdown, _React$Component);\n\n  function Dropdown() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Dropdown);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dropdown)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnChange\", function (selectedItem) {\n      if (_this.props.onChange) {\n        _this.props.onChange({\n          selectedItem: selectedItem\n        });\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(Dropdown, [{\n    key: \"render\",\n    value: function render() {\n      var _cx4;\n\n      var _this$props = this.props,\n          containerClassName = _this$props.className,\n          disabled = _this$props.disabled,\n          items = _this$props.items,\n          label = _this$props.label,\n          ariaLabel = _this$props.ariaLabel,\n          itemToString = _this$props.itemToString,\n          itemToElement = _this$props.itemToElement,\n          type = _this$props.type,\n          initialSelectedItem = _this$props.initialSelectedItem,\n          selectedItem = _this$props.selectedItem,\n          id = _this$props.id,\n          titleText = _this$props.titleText,\n          helperText = _this$props.helperText,\n          translateWithId = _this$props.translateWithId,\n          light = _this$props.light,\n          invalid = _this$props.invalid,\n          invalidText = _this$props.invalidText,\n          downshiftProps = _this$props.downshiftProps;\n      var inline = type === 'inline';\n\n      var className = function className(_ref) {\n        var _cx;\n\n        var isOpen = _ref.isOpen;\n        return cx(\"\".concat(prefix, \"--dropdown\"), containerClassName, (_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--dropdown--invalid\"), invalid), _defineProperty(_cx, \"\".concat(prefix, \"--dropdown--open\"), isOpen), _defineProperty(_cx, \"\".concat(prefix, \"--dropdown--inline\"), inline), _defineProperty(_cx, \"\".concat(prefix, \"--dropdown--disabled\"), disabled), _defineProperty(_cx, \"\".concat(prefix, \"--dropdown--light\"), light), _cx));\n      };\n\n      var titleClasses = cx(\"\".concat(prefix, \"--label\"), _defineProperty({}, \"\".concat(prefix, \"--label--disabled\"), disabled));\n      var title = titleText ? React.createElement(\"label\", {\n        htmlFor: id,\n        className: titleClasses\n      }, titleText) : null;\n      var helperClasses = cx(\"\".concat(prefix, \"--form__helper-text\"), _defineProperty({}, \"\".concat(prefix, \"--form__helper-text--disabled\"), disabled));\n      var helper = helperText ? React.createElement(\"div\", {\n        className: helperClasses\n      }, helperText) : null;\n      var wrapperClasses = cx(\"\".concat(prefix, \"--dropdown__wrapper\"), \"\".concat(prefix, \"--list-box__wrapper\"), (_cx4 = {}, _defineProperty(_cx4, \"\".concat(prefix, \"--dropdown__wrapper--inline\"), inline), _defineProperty(_cx4, \"\".concat(prefix, \"--list-box__wrapper--inline\"), inline), _defineProperty(_cx4, \"\".concat(prefix, \"--dropdown__wrapper--inline--invalid\"), inline && invalid), _defineProperty(_cx4, \"\".concat(prefix, \"--list-box__wrapper--inline--invalid\"), inline && invalid), _cx4)); // needs to be Capitalized for react to render it correctly\n\n      var ItemToElement = itemToElement;\n      return React.createElement(\"div\", {\n        className: wrapperClasses\n      }, title, !inline && helper, React.createElement(Downshift, _extends({}, downshiftProps, {\n        onChange: this.handleOnChange,\n        itemToString: itemToString,\n        defaultSelectedItem: initialSelectedItem,\n        selectedItem: selectedItem\n      }), function (_ref2) {\n        var isOpen = _ref2.isOpen,\n            itemToString = _ref2.itemToString,\n            selectedItem = _ref2.selectedItem,\n            highlightedIndex = _ref2.highlightedIndex,\n            getRootProps = _ref2.getRootProps,\n            getButtonProps = _ref2.getButtonProps,\n            getItemProps = _ref2.getItemProps,\n            getLabelProps = _ref2.getLabelProps;\n        return React.createElement(ListBox, _extends({\n          id: id,\n          type: type,\n          className: className({\n            isOpen: isOpen\n          }),\n          disabled: disabled,\n          isOpen: isOpen,\n          invalid: invalid,\n          invalidText: invalidText\n        }, getRootProps({\n          refKey: 'innerRef'\n        })), invalid && React.createElement(WarningFilled16, {\n          className: \"\".concat(prefix, \"--list-box__invalid-icon\")\n        }), React.createElement(ListBox.Field, _extends({\n          id: id,\n          tabIndex: \"0\"\n        }, getButtonProps({\n          disabled: disabled\n        })), React.createElement(\"span\", _extends({\n          className: \"\".concat(prefix, \"--list-box__label\")\n        }, getLabelProps()), selectedItem ? itemToString(selectedItem) : label), React.createElement(ListBox.MenuIcon, {\n          isOpen: isOpen,\n          translateWithId: translateWithId\n        })), isOpen && React.createElement(ListBox.Menu, {\n          \"aria-label\": ariaLabel,\n          id: id\n        }, items.map(function (item, index) {\n          return React.createElement(ListBox.MenuItem, _extends({\n            key: itemToString(item),\n            isActive: selectedItem === item,\n            isHighlighted: highlightedIndex === index || selectedItem === item\n          }, getItemProps({\n            item: item,\n            index: index\n          })), itemToElement ? React.createElement(ItemToElement, _extends({\n            key: itemToString(item)\n          }, item)) : itemToString(item));\n        })));\n      }));\n    }\n  }]);\n\n  return Dropdown;\n}(React.Component);\n\n_defineProperty(Dropdown, \"propTypes\", {\n  /**\n   * Disable the control\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * We try to stay as generic as possible here to allow individuals to pass\n   * in a collection of whatever kind of data structure they prefer\n   */\n  items: PropTypes.array.isRequired,\n\n  /**\n   * Allow users to pass in an arbitrary item or a string (in case their items are an array of strings)\n   * from their collection that are pre-selected\n   */\n  initialSelectedItem: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n\n  /**\n   * Specify a custom `id`\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * Specify whether you want the inline version of this control\n   */\n  inline: PropTypes.bool,\n\n  /**\n   * Specify if the currently selected value is invalid.\n   */\n  invalid: PropTypes.bool,\n\n  /**\n   * Message which is displayed if the value is invalid.\n   */\n  invalidText: PropTypes.string,\n\n  /**\n   * Helper function passed to downshift that allows the library to render a\n   * given item to a string label. By default, it extracts the `label` field\n   * from a given item to serve as the item label in the list.\n   */\n  itemToString: PropTypes.func,\n\n  /**\n   * Function to render items as custom components instead of strings.\n   * Defaults to null and is overriden by a getter\n   */\n  itemToElement: PropTypes.func,\n\n  /**\n   * `onChange` is a utility for this controlled component to communicate to a\n   * consuming component what kind of internal state changes are occuring.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Generic `label` that will be used as the textual representation of what\n   * this field is for\n   */\n  label: PropTypes.node.isRequired,\n\n  /**\n   * Callback function for translating ListBoxMenuIcon SVG title\n   */\n  translateWithId: PropTypes.func,\n\n  /**\n   * 'aria-label' of the ListBox component.\n   */\n  ariaLabel: PropTypes.string,\n\n  /**\n   * The dropdown type, `default` or `inline`\n   */\n  type: ListBoxPropTypes.ListBoxType,\n\n  /**\n   * In the case you want to control the dropdown selection entirely.\n   */\n  selectedItem: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n\n  /**\n   * `true` to use the light version.\n   */\n  light: PropTypes.bool,\n\n  /**\n   * Provide the title text that will be read by a screen reader when\n   * visiting this control\n   */\n  titleText: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\n  /**\n   * Provide helper text that is used alongside the control label for\n   * additional help\n   */\n  helperText: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\n  /**\n   * Additional props passed to Downshift\n   */\n  downshiftProps: Downshift.propTypes\n});\n\n_defineProperty(Dropdown, \"defaultProps\", {\n  disabled: false,\n  type: 'default',\n  itemToString: defaultItemToString,\n  itemToElement: null,\n  light: false,\n  titleText: '',\n  helperText: ''\n});\n\nexport { Dropdown as default };","map":null,"metadata":{},"sourceType":"module"}