{"ast":null,"code":"function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport React, { useState, useRef } from 'react';\nimport { settings } from 'carbon-components';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { AriaLabelPropType } from '../../prop-types/AriaPropTypes';\nimport SideNavFooter from './SideNavFooter';\nvar prefix = settings.prefix;\nvar SideNav = React.forwardRef(function SideNav(props, ref) {\n  var _cx;\n\n  var expandedProp = props.expanded,\n      defaultExpanded = props.defaultExpanded,\n      isChildOfHeader = props.isChildOfHeader,\n      ariaLabel = props['aria-label'],\n      ariaLabelledBy = props['aria-labelledby'],\n      children = props.children,\n      onToggle = props.onToggle,\n      customClassName = props.className,\n      t = props.translateById,\n      isFixedNav = props.isFixedNav;\n\n  var _useRef = useRef(expandedProp !== undefined),\n      controlled = _useRef.current;\n\n  var _useState = useState(defaultExpanded),\n      _useState2 = _slicedToArray(_useState, 2),\n      expandedState = _useState2[0],\n      setExpandedState = _useState2[1];\n\n  var expanded = controlled ? expandedProp : expandedState;\n\n  var handleToggle = function handleToggle(event) {\n    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !expanded;\n\n    if (!controlled) {\n      setExpandedState(value);\n    }\n\n    if (onToggle) {\n      onToggle(event, value);\n    }\n  };\n\n  var accessibilityLabel = {\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy\n  };\n  var assistiveText = expanded ? t('carbon.sidenav.state.open') : t('carbon.sidenav.state.closed');\n  var className = cx((_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--side-nav\"), true), _defineProperty(_cx, \"\".concat(prefix, \"--side-nav--expanded\"), expanded), _defineProperty(_cx, \"\".concat(prefix, \"--side-nav--collapsed\"), !expanded && isFixedNav), _defineProperty(_cx, customClassName, !!customClassName), _defineProperty(_cx, \"\".concat(prefix, \"--side-nav--ux\"), isChildOfHeader), _cx));\n  return React.createElement(\"nav\", _extends({\n    ref: ref,\n    className: \"\".concat(prefix, \"--side-nav__navigation \").concat(className)\n  }, accessibilityLabel, {\n    onFocus: function onFocus(event) {\n      return handleToggle(event, true);\n    },\n    onBlur: function onBlur(event) {\n      return handleToggle(event, false);\n    }\n  }), children, isFixedNav ? null : React.createElement(SideNavFooter, {\n    assistiveText: assistiveText,\n    expanded: expanded,\n    onToggle: handleToggle\n  }));\n});\nSideNav.defaultProps = {\n  translateById: function translateById(id) {\n    var translations = {\n      'carbon.sidenav.state.open': 'Close',\n      'carbon.sidenav.state.closed': 'Open'\n    };\n    return translations[id];\n  },\n  defaultExpanded: false,\n  isChildOfHeader: true\n};\nSideNav.propTypes = _objectSpread({\n  /**\n   * If `true`, the SideNav will be expanded, otherwise it will be collapsed.\n   * Using this prop causes SideNav to become a controled component.\n   */\n  expanded: PropTypes.bool,\n\n  /**\n   * If `true`, the SideNav will be open on initial render.\n   */\n  defaultExpanded: PropTypes.bool,\n\n  /**\n   * An optional listener that is called when an event that would cause\n   * toggling the SideNav occurs.\n   *\n   * @param {object} event\n   * @param {boolean} value\n   */\n  onToggle: PropTypes.func\n}, AriaLabelPropType, {\n  /**\n   * Optionally provide a custom class to apply to the underlying <li> node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Provide a custom function for translating all message ids within this\n   * component. This function will take in two arguments: the mesasge Id and the\n   * state of the component. From this, you should return a string representing\n   * the label you want displayed or read by screen readers.\n   */\n  translateById: PropTypes.func,\n\n  /**\n   * Optionally provide a custom class to apply to the underlying <li> node\n   */\n  isChildOfHeader: PropTypes.bool\n});\nexport default SideNav;","map":null,"metadata":{},"sourceType":"module"}