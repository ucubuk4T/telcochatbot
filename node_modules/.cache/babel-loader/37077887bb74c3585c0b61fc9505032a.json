{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport classnames from 'classnames';\nimport { settings } from 'carbon-components';\nimport CheckmarkOutline16 from '@carbon/icons-react/lib/checkmark--outline/16';\nimport Warning16 from '@carbon/icons-react/lib/warning/16';\nimport { keys, matches } from '../../tools/key';\nvar prefix = settings.prefix;\n\nvar defaultRenderLabel = function defaultRenderLabel(props) {\n  return React.createElement(\"p\", props);\n};\n\nexport var ProgressStep = function ProgressStep(_ref) {\n  var _classnames;\n\n  var props = _extends({}, _ref);\n\n  var label = props.label,\n      description = props.description,\n      className = props.className,\n      current = props.current,\n      complete = props.complete,\n      invalid = props.invalid,\n      secondaryLabel = props.secondaryLabel,\n      disabled = props.disabled,\n      onClick = props.onClick,\n      ProgressStepLabel = props.renderLabel;\n  var classes = classnames((_classnames = {}, _defineProperty(_classnames, \"\".concat(prefix, \"--progress-step\"), true), _defineProperty(_classnames, \"\".concat(prefix, \"--progress-step--current\"), current), _defineProperty(_classnames, \"\".concat(prefix, \"--progress-step--complete\"), complete), _defineProperty(_classnames, \"\".concat(prefix, \"--progress-step--incomplete\"), !complete && !current), _defineProperty(_classnames, \"\".concat(prefix, \"--progress-step--disabled\"), disabled), _defineProperty(_classnames, className, className), _classnames));\n\n  var handleKeyDown = function handleKeyDown(e) {\n    if (matches(e, [keys.ENTER, keys.SPACE])) {\n      onClick();\n    }\n  };\n\n  var currentSvg = current && React.createElement(\"svg\", null, React.createElement(\"path\", {\n    d: \"M 7, 7 m -7, 0 a 7,7 0 1,0 14,0 a 7,7 0 1,0 -14,0\"\n  }), React.createElement(\"title\", null, description));\n  var completeSvg = complete && React.createElement(CheckmarkOutline16, {\n    \"aria-label\": description,\n    role: \"img\"\n  }, React.createElement(\"title\", null, description));\n\n  var incompleteSvg = function () {\n    if (complete) {\n      return null;\n    }\n\n    if (invalid) {\n      return React.createElement(Warning16, {\n        className: \"\".concat(prefix, \"--progress__warning\")\n      }, React.createElement(\"title\", null, description));\n    }\n\n    return React.createElement(\"svg\", null, React.createElement(\"title\", null, description), React.createElement(\"path\", {\n      d: \"M8 1C4.1 1 1 4.1 1 8s3.1 7 7 7 7-3.1 7-7-3.1-7-7-7zm0 13c-3.3 0-6-2.7-6-6s2.7-6 6-6 6 2.7 6 6-2.7 6-6 6z\"\n    }));\n  }();\n\n  return React.createElement(\"li\", {\n    className: classes\n  }, React.createElement(\"div\", {\n    className: classnames(\"\".concat(prefix, \"--progress-step-button\"), _defineProperty({}, \"\".concat(prefix, \"--progress-step-button--unclickable\"), !onClick || current)),\n    role: \"button\",\n    tabIndex: !current && onClick ? 0 : -1,\n    onClick: !current ? onClick : undefined,\n    onKeyDown: handleKeyDown\n  }, currentSvg || completeSvg || incompleteSvg, React.createElement(ProgressStepLabel, {\n    className: \"\".concat(prefix, \"--progress-label\")\n  }, label), secondaryLabel !== null && secondaryLabel !== undefined ? React.createElement(\"p\", {\n    className: \"\".concat(prefix, \"--progress-optional\")\n  }, secondaryLabel) : null, React.createElement(\"span\", {\n    className: \"\".concat(prefix, \"--progress-line\")\n  })));\n};\nProgressStep.propTypes = {\n  /**\n   * Index of the current step within the ProgressIndicator\n   */\n  index: PropTypes.number,\n\n  /**\n   * Provide the label for the <ProgressStep>\n   */\n  label: PropTypes.node.isRequired,\n\n  /**\n   * Provide an optional className to be applied to the containing <li> node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify whether the step is the current step\n   */\n  current: PropTypes.bool,\n\n  /**\n   * Specify whether the step has been completed\n   */\n  complete: PropTypes.bool,\n\n  /**\n   * Provide a description for the <ProgressStep>\n   */\n  description: PropTypes.string,\n\n  /**\n   * Specify whether the step is invalid\n   */\n  invalid: PropTypes.bool,\n\n  /**\n   * Provide an optional secondary label\n   */\n  secondaryLabel: PropTypes.string,\n\n  /*\n   * An optional parameter to allow for overflow content to be rendered in a\n   * tooltip.\n   */\n  renderLabel: PropTypes.func,\n\n  /**\n   * Provide the props that describe a progress step tooltip\n   */\n  overflowTooltipProps: PropTypes.object,\n\n  /**\n   * Specify whether the step is disabled\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * The ID of the tooltip content.\n   */\n  tooltipId: PropTypes.string,\n\n  /**\n   * A callback called if the step is clicked or the enter key is pressed\n   */\n  onClick: PropTypes.func\n};\nProgressStep.defaultProps = {\n  renderLabel: defaultRenderLabel\n};\nexport var ProgressIndicator =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ProgressIndicator, _Component);\n\n  function ProgressIndicator() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ProgressIndicator);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ProgressIndicator)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"renderSteps\", function () {\n      var onChange = _this.props.onChange;\n      return React.Children.map(_this.props.children, function (child, index) {\n        // only setup click handlers if onChange event is passed\n        var onClick = onChange ? function () {\n          return onChange(index);\n        } : undefined;\n\n        if (index === _this.state.currentIndex) {\n          return React.cloneElement(child, {\n            current: true,\n            index: index,\n            onClick: onClick\n          });\n        }\n\n        if (index < _this.state.currentIndex) {\n          return React.cloneElement(child, {\n            complete: true,\n            index: index,\n            onClick: onClick\n          });\n        }\n\n        if (index > _this.state.currentIndex) {\n          return React.cloneElement(child, {\n            complete: false,\n            index: index,\n            onClick: onClick\n          });\n        }\n\n        return null;\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(ProgressIndicator, [{\n    key: \"render\",\n    value: function render() {\n      var _classnames3;\n\n      var _this$props = this.props,\n          className = _this$props.className,\n          currentIndex = _this$props.currentIndex,\n          other = _objectWithoutProperties(_this$props, [\"className\", \"currentIndex\"]); // eslint-disable-line no-unused-vars\n\n\n      var classes = classnames((_classnames3 = {}, _defineProperty(_classnames3, \"\".concat(prefix, \"--progress\"), true), _defineProperty(_classnames3, className, className), _classnames3));\n      return React.createElement(\"ul\", _extends({\n        className: classes\n      }, other), this.renderSteps());\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(_ref2, state) {\n      var currentIndex = _ref2.currentIndex;\n      var prevCurrentIndex = state.prevCurrentIndex;\n      return prevCurrentIndex === currentIndex ? null : {\n        currentIndex: currentIndex,\n        prevCurrentIndex: currentIndex\n      };\n    }\n  }]);\n\n  return ProgressIndicator;\n}(Component);\n\n_defineProperty(ProgressIndicator, \"propTypes\", {\n  /**\n   * Provide <ProgressStep> components to be rendered in the\n   * <ProgressIndicator>\n   */\n  children: PropTypes.node,\n\n  /**\n   * Provide an optional className to be applied to the containing node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Optionally specify the current step array index\n   */\n  currentIndex: PropTypes.number,\n\n  /**\n   * Optional callback called if a ProgressStep is clicked on.  Returns the index of the step.\n   */\n  onChange: PropTypes.func\n});\n\n_defineProperty(ProgressIndicator, \"defaultProps\", {\n  currentIndex: 0\n});","map":null,"metadata":{},"sourceType":"module"}