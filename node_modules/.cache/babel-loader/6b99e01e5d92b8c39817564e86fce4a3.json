{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { settings } from 'carbon-components';\nimport WarningFilled16 from '@carbon/icons-react/lib/warning--filled/16';\nvar prefix = settings.prefix;\n\nvar DefaultCharCounter = function DefaultCharCounter(_ref) {\n  var disabled = _ref.disabled,\n      count = _ref.count,\n      maxLength = _ref.maxLength;\n  var charCounterClasses = classNames(\"\".concat(prefix, \"--text-area--character-counter\"), _defineProperty({}, \"\".concat(prefix, \"--text-area--character-counter--disabled\"), disabled));\n  return React.createElement(\"span\", {\n    className: charCounterClasses\n  }, React.createElement(\"span\", {\n    className: \"\".concat(prefix, \"--text-area--character-counter--length\")\n  }, count), \"/\", React.createElement(\"span\", {\n    className: \"\".concat(prefix, \"--text-area--character-counter--maxlength\")\n  }, maxLength));\n};\n\nvar TextArea = function TextArea(_ref2) {\n  var _classNames2, _classNames4;\n\n  var className = _ref2.className,\n      id = _ref2.id,\n      labelText = _ref2.labelText,\n      hideLabel = _ref2.hideLabel,\n      _onChange = _ref2.onChange,\n      _onClick = _ref2.onClick,\n      invalid = _ref2.invalid,\n      invalidText = _ref2.invalidText,\n      helperText = _ref2.helperText,\n      light = _ref2.light,\n      charCount = _ref2.charCount,\n      maxLength = _ref2.maxLength,\n      _ref2$renderCharCount = _ref2.renderCharCounter,\n      CharCounter = _ref2$renderCharCount === void 0 ? DefaultCharCounter : _ref2$renderCharCount,\n      other = _objectWithoutProperties(_ref2, [\"className\", \"id\", \"labelText\", \"hideLabel\", \"onChange\", \"onClick\", \"invalid\", \"invalidText\", \"helperText\", \"light\", \"charCount\", \"maxLength\", \"renderCharCounter\"]);\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      textareaVal = _useState2[0],\n      setInput = _useState2[1];\n\n  var textareaProps = {\n    id: id,\n    onChange: function onChange(evt) {\n      if (!other.disabled) {\n        _onChange(evt);\n      }\n    },\n    onClick: function onClick(evt) {\n      if (!other.disabled) {\n        _onClick(evt);\n      }\n    },\n    maxLength: maxLength || null\n  };\n  var labelClasses = classNames(\"\".concat(prefix, \"--label\"), (_classNames2 = {}, _defineProperty(_classNames2, \"\".concat(prefix, \"--visually-hidden\"), hideLabel), _defineProperty(_classNames2, \"\".concat(prefix, \"--label--disabled\"), other.disabled), _classNames2));\n\n  var label = function () {\n    var labelContent = labelText ? React.createElement(\"label\", {\n      htmlFor: id,\n      className: labelClasses\n    }, labelText) : null;\n\n    if (labelContent && charCount) {\n      return React.createElement(\"div\", {\n        className: \"\".concat(prefix, \"--text-area__character-counter-title\")\n      }, labelContent, React.createElement(CharCounter, {\n        disabled: other.disabled,\n        count: textareaVal.length,\n        maxLength: maxLength\n      }));\n    }\n\n    return labelContent;\n  }();\n\n  var helperTextClasses = classNames(\"\".concat(prefix, \"--form__helper-text\"), _defineProperty({}, \"\".concat(prefix, \"--form__helper-text--disabled\"), other.disabled));\n\n  var helper = function () {\n    var helperContent = helperText ? React.createElement(\"div\", {\n      className: helperTextClasses\n    }, helperText) : null;\n\n    if (!labelText && charCount) {\n      return React.createElement(\"div\", {\n        className: \"\".concat(prefix, \"--text-area__character-counter-title\")\n      }, helperContent, React.createElement(CharCounter, {\n        disabled: other.disabled,\n        count: textareaVal.length,\n        maxLength: maxLength\n      }));\n    }\n\n    return helperContent;\n  }();\n\n  var errorId = id + '-error-msg';\n  var error = invalid ? React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--form-requirement\"),\n    id: errorId\n  }, invalidText) : null;\n  var textareaClasses = classNames(\"\".concat(prefix, \"--text-area\"), className, (_classNames4 = {}, _defineProperty(_classNames4, \"\".concat(prefix, \"--text-area--light\"), light), _defineProperty(_classNames4, \"\".concat(prefix, \"--text-area--invalid\"), invalid), _classNames4));\n  var input = React.createElement(\"textarea\", _extends({}, other, textareaProps, {\n    className: textareaClasses,\n    \"aria-invalid\": invalid || null,\n    \"aria-describedby\": invalid ? errorId : null,\n    disabled: other.disabled,\n    value: textareaVal,\n    onInput: function onInput(e) {\n      return setInput(e.target.value);\n    }\n  }));\n  return React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--form-item\")\n  }, label, helper, React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--text-area__wrapper\"),\n    \"data-invalid\": invalid || null\n  }, invalid && React.createElement(WarningFilled16, {\n    className: \"\".concat(prefix, \"--text-area__invalid-icon\")\n  }), input), error);\n};\n\nTextArea.propTypes = {\n  /**\n   * Provide a custom className that is applied directly to the underlying\n   * <textarea> node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify the `cols` attribute for the underlying <textarea> node\n   */\n  cols: PropTypes.number,\n\n  /**\n   * Optionally provide the default value of the <textarea>\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Specify whether the control is disabled\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Provide a unique identifier for the control\n   */\n  id: PropTypes.string,\n\n  /**\n   * Provide the text that will be read by a screen reader when visiting this\n   * control\n   */\n  labelText: PropTypes.node.isRequired,\n\n  /**\n   * Optionally provide an `onChange` handler that is called whenever <textarea>\n   * is updated\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Optionally provide an `onClick` handler that is called whenever the\n   * <textarea> is clicked\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Specify the placeholder attribute for the <textarea>\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * Specify the rows attribute for the <textarea>\n   */\n  rows: PropTypes.number,\n\n  /**\n   * Provide the current value of the <textarea>\n   */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Specify whether the control is currently invalid\n   */\n  invalid: PropTypes.bool,\n\n  /**\n   * Provide the text that is displayed when the control is in an invalid state\n   */\n  invalidText: PropTypes.string,\n\n  /**\n   * Provide text that is used alongside the control label for additional help\n   */\n  helperText: PropTypes.node,\n\n  /**\n   * Specify whether you want the underlying label to be visually hidden\n   */\n  hideLabel: PropTypes.bool,\n\n  /**\n   * Specify whether you want the light version of this control\n   */\n  light: PropTypes.bool,\n\n  /**\n   * Specify whether the character counter is shown\n   */\n  charCount: PropTypes.bool,\n\n  /**\n   * The maximum allowed input value length\n   */\n  maxLength: PropTypes.number\n};\nTextArea.defaultProps = {\n  disabled: false,\n  onChange: function onChange() {},\n  onClick: function onClick() {},\n  placeholder: '',\n  rows: 4,\n  cols: 50,\n  invalid: false,\n  invalidText: '',\n  helperText: '',\n  light: false\n};\nexport default TextArea;","map":null,"metadata":{},"sourceType":"module"}