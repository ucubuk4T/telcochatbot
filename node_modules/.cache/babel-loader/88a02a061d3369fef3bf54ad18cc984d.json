{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { settings } from 'carbon-components';\nimport setupGetInstanceId from '../../tools/setupGetInstanceId';\nvar prefix = settings.prefix;\nvar getInstanceId = setupGetInstanceId();\n\nvar TooltipIcon = function TooltipIcon(_ref) {\n  var _cx;\n\n  var id = _ref.id,\n      className = _ref.className,\n      children = _ref.children,\n      direction = _ref.direction,\n      align = _ref.align,\n      tooltipText = _ref.tooltipText,\n      rest = _objectWithoutProperties(_ref, [\"id\", \"className\", \"children\", \"direction\", \"align\", \"tooltipText\"]);\n\n  var tooltipId = id || \"definition-tooltip-\".concat(getInstanceId());\n  var tooltipClassName = cx(\"\".concat(prefix, \"--tooltip--icon\"), className);\n  var tooltipTriggerClasses = cx(\"\".concat(prefix, \"--tooltip__trigger\"), (_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--tooltip--\").concat(direction), direction), _defineProperty(_cx, \"\".concat(prefix, \"--tooltip--align-\").concat(align), align), _cx));\n  return React.createElement(\"div\", _extends({}, rest, {\n    className: tooltipClassName\n  }), React.createElement(\"button\", {\n    className: tooltipTriggerClasses,\n    \"aria-describedby\": tooltipId,\n    \"aria-label\": tooltipText\n  }, children));\n};\n\nTooltipIcon.propTypes = {\n  /**\n   * Specify an icon as children that will be used as the tooltip trigger. This\n   * can be an icon from our Icon component, or a custom SVG element.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Specify the direction of the tooltip. Can be either top or bottom.\n   */\n  direction: PropTypes.oneOf(['top', 'bottom']),\n\n  /**\n   * Specify the alignment (to the trigger button) of the tooltip.\n   * Can be one of: start, center, or end.\n   */\n  align: PropTypes.oneOf(['start', 'center', 'end']),\n\n  /**\n   * Optionally specify a custom id for the tooltip. If one is not provided, we\n   * generate a unique id for you.\n   */\n  id: PropTypes.string,\n\n  /**\n   * Provide the ARIA label for the tooltip.\n   * TODO: rename this prop (will be a breaking change)\n   */\n  tooltipText: PropTypes.string.isRequired\n};\nTooltipIcon.defaultProps = {\n  direction: 'bottom',\n  align: 'center'\n};\nexport default TooltipIcon;","map":null,"metadata":{},"sourceType":"module"}