{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport { settings } from 'carbon-components';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport SideNavLinkText from './SideNavLinkText';\nimport Link from './Link';\nvar prefix = settings.prefix;\nvar SideNavMenuItem = React.forwardRef(function SideNavMenuItem(props, ref) {\n  var _cx;\n\n  var children = props.children,\n      customClassName = props.className,\n      isActive = props.isActive,\n      rest = _objectWithoutProperties(props, [\"children\", \"className\", \"isActive\"]);\n\n  var className = cx(\"\".concat(prefix, \"--side-nav__menu-item\"), customClassName);\n  var linkClassName = cx((_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--side-nav__link\"), true), _defineProperty(_cx, \"\".concat(prefix, \"--side-nav__link--current\"), isActive), _cx));\n  return React.createElement(\"li\", {\n    className: className,\n    role: \"none\"\n  }, React.createElement(Link, _extends({}, rest, {\n    className: linkClassName,\n    role: \"menuitem\",\n    ref: ref\n  }), React.createElement(SideNavLinkText, null, children)));\n});\nSideNavMenuItem.propTypes = {\n  /**\n   * Specify the childrento be rendered inside of the `SideNavMenuItem`\n   */\n  children: PropTypes.node,\n\n  /**\n   * Provide an optional class to be applied to the containing node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Optionally specify whether the link is \"active\". An active link is one that\n   * has an href that is the same as the current page. Can also pass in\n   * `aria-current=\"page\"`, as well.\n   */\n  isActive: PropTypes.bool\n};\nexport default SideNavMenuItem;","map":null,"metadata":{},"sourceType":"module"}