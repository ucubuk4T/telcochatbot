{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { settings } from 'carbon-components';\nimport View16 from '@carbon/icons-react/lib/view/16';\nimport ViewOff16 from '@carbon/icons-react/lib/view--off/16';\nimport WarningFilled16 from '@carbon/icons-react/lib/warning--filled/16';\nimport { textInputProps } from './util';\nvar prefix = settings.prefix;\n\nvar PasswordInput =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PasswordInput, _React$Component);\n\n  function PasswordInput() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PasswordInput);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PasswordInput)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      type: 'password'\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"togglePasswordVisibility\", function () {\n      _this.setState({\n        type: _this.state.type === 'password' ? 'text' : 'password'\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(PasswordInput, [{\n    key: \"render\",\n    value: function render() {\n      var _classNames, _classNames2;\n\n      var _this$props = this.props,\n          alt = _this$props.alt,\n          labelText = _this$props.labelText,\n          className = _this$props.className,\n          id = _this$props.id,\n          placeholder = _this$props.placeholder,\n          _onChange = _this$props.onChange,\n          _onClick = _this$props.onClick,\n          hideLabel = _this$props.hideLabel,\n          invalid = _this$props.invalid,\n          invalidText = _this$props.invalidText,\n          helperText = _this$props.helperText,\n          light = _this$props.light,\n          other = _objectWithoutProperties(_this$props, [\"alt\", \"labelText\", \"className\", \"id\", \"placeholder\", \"onChange\", \"onClick\", \"hideLabel\", \"invalid\", \"invalidText\", \"helperText\", \"light\"]);\n\n      var errorId = id + '-error-msg';\n      var textInputClasses = classNames(\"\".concat(prefix, \"--text-input\"), \"\".concat(prefix, \"--password-input\"), className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefix, \"--text-input--light\"), light), _defineProperty(_classNames, \"\".concat(prefix, \"--text-input--invalid\"), invalid), _classNames));\n\n      var sharedTextInputProps = _objectSpread({\n        id: id,\n        onChange: function onChange(evt) {\n          if (!other.disabled) {\n            _onChange(evt);\n          }\n        },\n        onClick: function onClick(evt) {\n          if (!other.disabled) {\n            _onClick(evt);\n          }\n        },\n        placeholder: placeholder,\n        type: this.state.type,\n        className: textInputClasses\n      }, other);\n\n      var labelClasses = classNames(\"\".concat(prefix, \"--label\"), (_classNames2 = {}, _defineProperty(_classNames2, \"\".concat(prefix, \"--visually-hidden\"), hideLabel), _defineProperty(_classNames2, \"\".concat(prefix, \"--label--disabled\"), other.disabled), _classNames2));\n      var helperTextClasses = classNames(\"\".concat(prefix, \"--form__helper-text\"), _defineProperty({}, \"\".concat(prefix, \"--form__helper-text--disabled\"), other.disabled));\n      var label = labelText ? React.createElement(\"label\", {\n        htmlFor: id,\n        className: labelClasses\n      }, labelText) : null;\n      var error = invalid ? React.createElement(\"div\", {\n        className: \"\".concat(prefix, \"--form-requirement\"),\n        id: errorId\n      }, invalidText) : null;\n      var passwordIsVisible = this.state.type === 'text';\n      var passwordVisibilityToggleButtonClasses = classNames(\"\".concat(prefix, \"--text-input--password__visibility\"), \"\".concat(prefix, \"--tooltip__trigger\"), \"\".concat(prefix, \"--tooltip--icon__bottom\"), {});\n      var passwordVisibilityIcon = passwordIsVisible ? React.createElement(ViewOff16, {\n        className: \"\".concat(prefix, \"--icon-visibility-off\")\n      }) : React.createElement(View16, {\n        className: \"\".concat(prefix, \"--icon-visibility-on\")\n      });\n      var input = React.createElement(React.Fragment, null, React.createElement(\"input\", _extends({}, textInputProps({\n        invalid: invalid,\n        sharedTextInputProps: sharedTextInputProps,\n        errorId: errorId\n      }), {\n        \"data-toggle-password-visibility\": this.state.type === 'password'\n      })), React.createElement(\"button\", {\n        className: passwordVisibilityToggleButtonClasses,\n        \"aria-label\": alt || \"\".concat(passwordIsVisible ? 'Hide' : 'Show', \" password\"),\n        onClick: this.togglePasswordVisibility\n      }, passwordVisibilityIcon));\n      var helper = helperText ? React.createElement(\"div\", {\n        className: helperTextClasses\n      }, helperText) : null;\n      return React.createElement(\"div\", {\n        className: \"\".concat(prefix, \"--form-item \").concat(prefix, \"--text-input-wrapper \").concat(prefix, \"--password-input-wrapper\")\n      }, label, helper, React.createElement(\"div\", {\n        className: \"\".concat(prefix, \"--text-input__field-wrapper\"),\n        \"data-invalid\": invalid || null\n      }, invalid && React.createElement(WarningFilled16, {\n        className: \"\".concat(prefix, \"--text-input__invalid-icon\")\n      }), input), error);\n    }\n  }]);\n\n  return PasswordInput;\n}(React.Component);\n\nexport { PasswordInput as default };\nPasswordInput.propTypes = {\n  /**\n   * Provide custom alt text for the password visibility toggle button\n   */\n  alt: PropTypes.string,\n\n  /**\n   * Provide a custom className that is applied directly to the underlying\n   * <input> node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Optionally provide the default value of the <input>\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Specify whether the control is disabled\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Provide a unique identifier for the input field\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * Provide the text that will be read by a screen reader when visiting this\n   * control\n   */\n  labelText: PropTypes.node.isRequired,\n\n  /**\n   * Optionally provide an `onChange` handler that is called whenever <input>\n   * is updated\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Optionally provide an `onClick` handler that is called whenever the\n   * <input> is clicked\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Specify the placeholder attribute for the <input>\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * Provide the current value of the <input>\n   */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Specify whether or not the underlying label is visually hidden\n   */\n  hideLabel: PropTypes.bool,\n\n  /**\n   * Specify whether the control is currently invalid\n   */\n  invalid: PropTypes.bool,\n\n  /**\n   * Provide the text that is displayed when the control is in an invalid state\n   */\n  invalidText: PropTypes.string,\n\n  /**\n   * Provide text that is used alongside the control label for additional help\n   */\n  helperText: PropTypes.node,\n\n  /**\n   * Specify light version or default version of this control\n   */\n  light: PropTypes.bool\n};\nPasswordInput.defaultProps = {\n  alt: '',\n  className: '${prefix}--text__input',\n  disabled: false,\n  onChange: function onChange() {},\n  onClick: function onClick() {},\n  invalid: false,\n  invalidText: '',\n  helperText: '',\n  light: false\n};","map":null,"metadata":{},"sourceType":"module"}