{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { settings } from 'carbon-components';\nimport View16 from '@carbon/icons-react/lib/view/16';\nimport ViewOff16 from '@carbon/icons-react/lib/view--off/16';\nimport WarningFilled16 from '@carbon/icons-react/lib/warning--filled/16';\nimport { textInputProps } from './util';\nvar prefix = settings.prefix;\nvar ControlledPasswordInput = React.forwardRef(function ControlledPasswordInput(_ref, ref) {\n  var _classNames, _classNames2;\n\n  var alt = _ref.alt,\n      labelText = _ref.labelText,\n      className = _ref.className,\n      id = _ref.id,\n      placeholder = _ref.placeholder,\n      _onChange = _ref.onChange,\n      _onClick = _ref.onClick,\n      hideLabel = _ref.hideLabel,\n      invalid = _ref.invalid,\n      invalidText = _ref.invalidText,\n      helperText = _ref.helperText,\n      light = _ref.light,\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? 'password' : _ref$type,\n      togglePasswordVisibility = _ref.togglePasswordVisibility,\n      _ref$hidePasswordText = _ref.hidePasswordText,\n      hidePasswordText = _ref$hidePasswordText === void 0 ? 'Hide' : _ref$hidePasswordText,\n      _ref$showPasswordText = _ref.showPasswordText,\n      showPasswordText = _ref$showPasswordText === void 0 ? 'Show' : _ref$showPasswordText,\n      other = _objectWithoutProperties(_ref, [\"alt\", \"labelText\", \"className\", \"id\", \"placeholder\", \"onChange\", \"onClick\", \"hideLabel\", \"invalid\", \"invalidText\", \"helperText\", \"light\", \"type\", \"togglePasswordVisibility\", \"hidePasswordText\", \"showPasswordText\"]);\n\n  var errorId = id + '-error-msg';\n  var textInputClasses = classNames(\"\".concat(prefix, \"--text-input\"), \"\".concat(prefix, \"--password-input\"), className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefix, \"--text-input--light\"), light), _defineProperty(_classNames, \"\".concat(prefix, \"--text-input--invalid\"), invalid), _classNames));\n\n  var sharedTextInputProps = _objectSpread({\n    id: id,\n    onChange: function onChange(evt) {\n      if (!other.disabled) {\n        _onChange(evt);\n      }\n    },\n    onClick: function onClick(evt) {\n      if (!other.disabled) {\n        _onClick(evt);\n      }\n    },\n    placeholder: placeholder,\n    type: type,\n    ref: ref,\n    className: textInputClasses\n  }, other);\n\n  var labelClasses = classNames(\"\".concat(prefix, \"--label\"), (_classNames2 = {}, _defineProperty(_classNames2, \"\".concat(prefix, \"--visually-hidden\"), hideLabel), _defineProperty(_classNames2, \"\".concat(prefix, \"--label--disabled\"), other.disabled), _classNames2));\n  var helperTextClasses = classNames(\"\".concat(prefix, \"--form__helper-text\"), _defineProperty({}, \"\".concat(prefix, \"--form__helper-text--disabled\"), other.disabled));\n  var label = labelText ? React.createElement(\"label\", {\n    htmlFor: id,\n    className: labelClasses\n  }, labelText) : null;\n  var error = invalid ? React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--form-requirement\"),\n    id: errorId\n  }, invalidText) : null;\n  var passwordIsVisible = type === 'text';\n  var passwordVisibilityToggleButtonClasses = classNames(\"\".concat(prefix, \"--text-input--password__visibility\"), \"\".concat(prefix, \"--tooltip__trigger\"), \"\".concat(prefix, \"--tooltip--icon__bottom\"), {});\n  var passwordVisibilityIcon = passwordIsVisible ? React.createElement(ViewOff16, {\n    className: \"\".concat(prefix, \"--icon-visibility-off\")\n  }) : React.createElement(View16, {\n    className: \"\".concat(prefix, \"--icon-visibility-on\")\n  });\n  var input = React.createElement(React.Fragment, null, React.createElement(\"input\", _extends({}, textInputProps({\n    invalid: invalid,\n    sharedTextInputProps: sharedTextInputProps,\n    errorId: errorId\n  }), {\n    \"data-toggle-password-visibility\": type === 'password'\n  })), React.createElement(\"button\", {\n    className: passwordVisibilityToggleButtonClasses,\n    \"aria-label\": alt || \"\".concat(passwordIsVisible ? hidePasswordText : showPasswordText, \" password\"),\n    onClick: togglePasswordVisibility\n  }, passwordVisibilityIcon));\n  var helper = helperText ? React.createElement(\"div\", {\n    className: helperTextClasses\n  }, helperText) : null;\n  return React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--form-item \").concat(prefix, \"--text-input-wrapper \").concat(prefix, \"--password-input-wrapper\")\n  }, label, helper, React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--text-input__field-wrapper\"),\n    \"data-invalid\": invalid || null\n  }, invalid && React.createElement(WarningFilled16, {\n    className: \"\".concat(prefix, \"--text-input__invalid-icon\")\n  }), input), error);\n});\nControlledPasswordInput.propTypes = {\n  /**\n   * Provide custom alt text for the password visibility toggle button\n   */\n  alt: PropTypes.string,\n\n  /**\n   * Provide a custom className that is applied directly to the underlying\n   * <input> node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Optionally provide the default value of the <input>\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Specify whether the control is disabled\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Provide a unique identifier for the input field\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * Provide the text that will be read by a screen reader when visiting this\n   * control\n   */\n  labelText: PropTypes.node.isRequired,\n\n  /**\n   * Optionally provide an `onChange` handler that is called whenever <input>\n   * is updated\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Optionally provide an `onClick` handler that is called whenever the\n   * <input> is clicked\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Specify the placeholder attribute for the <input>\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * Provide the current value of the <input>\n   */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Specify whether or not the underlying label is visually hidden\n   */\n  hideLabel: PropTypes.bool,\n\n  /**\n   * Specify whether the control is currently invalid\n   */\n  invalid: PropTypes.bool,\n\n  /**\n   * Provide the text that is displayed when the control is in an invalid state\n   */\n  invalidText: PropTypes.string,\n\n  /**\n   * Provide text that is used alongside the control label for additional help\n   */\n  helperText: PropTypes.node,\n\n  /**\n   * Specify light version or default version of this control\n   */\n  light: PropTypes.bool\n};\nControlledPasswordInput.defaultProps = {\n  alt: '',\n  className: '${prefix}--text__input',\n  disabled: false,\n  onChange: function onChange() {},\n  onClick: function onClick() {},\n  invalid: false,\n  invalidText: '',\n  helperText: '',\n  light: false\n};\nexport default ControlledPasswordInput;","map":null,"metadata":{},"sourceType":"module"}