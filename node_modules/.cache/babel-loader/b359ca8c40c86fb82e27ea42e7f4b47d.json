{"ast":null,"code":"function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Downshift from 'downshift';\nimport isEqual from 'lodash.isequal';\nimport { settings } from 'carbon-components';\nimport WarningFilled16 from '@carbon/icons-react/lib/warning--filled/16';\nimport ListBox from '../ListBox';\nimport Checkbox from '../Checkbox';\nimport Selection from '../../internal/Selection';\nimport { sortingPropTypes } from './MultiSelectPropTypes';\nimport { defaultItemToString } from './tools/itemToString';\nimport { defaultSortItems, defaultCompareItems } from './tools/sorting';\nimport { defaultFilterItems } from '../ComboBox/tools/filter';\nvar prefix = settings.prefix;\n\nvar FilterableMultiSelect =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FilterableMultiSelect, _React$Component);\n\n  _createClass(FilterableMultiSelect, null, [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(_ref, state) {\n      var open = _ref.open;\n      /**\n       * programmatically control this `open` prop\n       */\n\n      var prevOpen = state.prevOpen;\n      return prevOpen === open ? null : {\n        isOpen: open,\n        prevOpen: open\n      };\n    }\n  }]);\n\n  function FilterableMultiSelect(props) {\n    var _this;\n\n    _classCallCheck(this, FilterableMultiSelect);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FilterableMultiSelect).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnChange\", function (changes) {\n      if (_this.props.onChange) {\n        _this.props.onChange(changes);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnToggleMenu\", function () {\n      _this.setState(function (state) {\n        return {\n          isOpen: !state.isOpen\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnOuterClick\", function () {\n      _this.setState({\n        isOpen: false,\n        inputValue: ''\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnStateChange\", function (changes, downshift) {\n      if (changes.isOpen && !_this.state.isOpen) {\n        _this.setState({\n          topItems: downshift.selectedItem\n        });\n      }\n\n      var type = changes.type;\n\n      switch (type) {\n        case Downshift.stateChangeTypes.keyDownArrowUp:\n        case Downshift.stateChangeTypes.itemMouseEnter:\n          _this.setState({\n            highlightedIndex: changes.highlightedIndex\n          });\n\n          break;\n\n        case Downshift.stateChangeTypes.keyDownArrowDown:\n          _this.setState({\n            highlightedIndex: changes.highlightedIndex,\n            isOpen: true\n          });\n\n          break;\n\n        case Downshift.stateChangeTypes.keyDownEscape:\n        case Downshift.stateChangeTypes.mouseUp:\n          _this.setState({\n            isOpen: false\n          });\n\n          break;\n        // Opt-in to some cases where we should be toggling the menu based on\n        // a given key press or mouse handler\n        // Reference: https://github.com/paypal/downshift/issues/206\n\n        case Downshift.stateChangeTypes.clickButton:\n        case Downshift.stateChangeTypes.keyDownSpaceButton:\n          _this.setState(function () {\n            var nextIsOpen = changes.isOpen || false;\n\n            if (changes.isOpen === false) {\n              // If Downshift is trying to close the menu, but we know the input\n              // is the active element in thedocument, then keep the menu open\n              if (_this.inputNode === document.activeElement) {\n                nextIsOpen = true;\n              }\n            }\n\n            return {\n              isOpen: nextIsOpen\n            };\n          });\n\n          break;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnInputKeyDown\", function (event) {\n      event.stopPropagation();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnInputValueChange\", function (inputValue, _ref2) {\n      var type = _ref2.type;\n      if (type === Downshift.stateChangeTypes.changeInput) _this.setState(function () {\n        if (Array.isArray(inputValue)) {\n          return {\n            inputValue: ''\n          };\n        }\n\n        return {\n          inputValue: inputValue || ''\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"clearInputValue\", function (event) {\n      event.stopPropagation();\n\n      _this.setState({\n        inputValue: ''\n      });\n\n      _this.inputNode && _this.inputNode.focus && _this.inputNode.focus();\n    });\n\n    _this.state = {\n      highlightedIndex: null,\n      isOpen: props.open,\n      inputValue: '',\n      topItems: []\n    };\n    return _this;\n  }\n\n  _createClass(FilterableMultiSelect, [{\n    key: \"render\",\n    value: function render() {\n      var _cx,\n          _this2 = this;\n\n      var _this$state = this.state,\n          highlightedIndex = _this$state.highlightedIndex,\n          isOpen = _this$state.isOpen,\n          inputValue = _this$state.inputValue;\n      var _this$props = this.props,\n          ariaLabel = _this$props.ariaLabel,\n          containerClassName = _this$props.className,\n          disabled = _this$props.disabled,\n          filterItems = _this$props.filterItems,\n          items = _this$props.items,\n          itemToString = _this$props.itemToString,\n          titleText = _this$props.titleText,\n          helperText = _this$props.helperText,\n          type = _this$props.type,\n          initialSelectedItems = _this$props.initialSelectedItems,\n          id = _this$props.id,\n          locale = _this$props.locale,\n          placeholder = _this$props.placeholder,\n          sortItems = _this$props.sortItems,\n          compareItems = _this$props.compareItems,\n          light = _this$props.light,\n          invalid = _this$props.invalid,\n          invalidText = _this$props.invalidText,\n          useTitleInItem = _this$props.useTitleInItem,\n          translateWithId = _this$props.translateWithId,\n          downshiftProps = _this$props.downshiftProps;\n      var inline = type === 'inline';\n      var wrapperClasses = cx(\"\".concat(prefix, \"--multi-select__wrapper\"), \"\".concat(prefix, \"--list-box__wrapper\"), (_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--multi-select__wrapper--inline\"), inline), _defineProperty(_cx, \"\".concat(prefix, \"--list-box__wrapper--inline\"), inline), _defineProperty(_cx, \"\".concat(prefix, \"--multi-select__wrapper--inline--invalid\"), inline && invalid), _defineProperty(_cx, \"\".concat(prefix, \"--list-box__wrapper--inline--invalid\"), inline && invalid), _cx));\n      var titleClasses = cx(\"\".concat(prefix, \"--label\"), _defineProperty({}, \"\".concat(prefix, \"--label--disabled\"), disabled));\n      var title = titleText ? React.createElement(\"label\", {\n        htmlFor: id,\n        className: titleClasses\n      }, titleText) : null;\n      var helperClasses = cx(\"\".concat(prefix, \"--form__helper-text\"), _defineProperty({}, \"\".concat(prefix, \"--form__helper-text--disabled\"), disabled));\n      var helper = helperText ? React.createElement(\"div\", {\n        className: helperClasses\n      }, helperText) : null;\n      var input = React.createElement(Selection, {\n        disabled: disabled,\n        onChange: this.handleOnChange,\n        initialSelectedItems: initialSelectedItems,\n        render: function render(_ref3) {\n          var selectedItems = _ref3.selectedItems,\n              onItemChange = _ref3.onItemChange,\n              clearSelection = _ref3.clearSelection;\n          return React.createElement(Downshift, _extends({}, downshiftProps, {\n            highlightedIndex: highlightedIndex,\n            isOpen: isOpen,\n            inputValue: inputValue,\n            onInputValueChange: _this2.handleOnInputValueChange,\n            onChange: onItemChange,\n            itemToString: itemToString,\n            onStateChange: _this2.handleOnStateChange,\n            onOuterClick: _this2.handleOnOuterClick,\n            selectedItem: selectedItems,\n            render: function render(_ref4) {\n              var _cx4;\n\n              var getButtonProps = _ref4.getButtonProps,\n                  getInputProps = _ref4.getInputProps,\n                  getItemProps = _ref4.getItemProps,\n                  getRootProps = _ref4.getRootProps,\n                  isOpen = _ref4.isOpen,\n                  inputValue = _ref4.inputValue,\n                  selectedItem = _ref4.selectedItem;\n              var className = cx(\"\".concat(prefix, \"--multi-select\"), \"\".concat(prefix, \"--combo-box\"), \"\".concat(prefix, \"--multi-select--filterable\"), containerClassName, (_cx4 = {}, _defineProperty(_cx4, \"\".concat(prefix, \"--multi-select--invalid\"), invalid), _defineProperty(_cx4, \"\".concat(prefix, \"--multi-select--open\"), isOpen), _defineProperty(_cx4, \"\".concat(prefix, \"--multi-select--inline\"), inline), _defineProperty(_cx4, \"\".concat(prefix, \"--multi-select--selected\"), selectedItem.length > 0), _cx4));\n              return React.createElement(ListBox, _extends({\n                className: className,\n                disabled: disabled,\n                light: light,\n                invalid: invalid,\n                invalidText: invalidText,\n                isOpen: isOpen\n              }, getRootProps({\n                refKey: 'innerRef'\n              })), invalid && React.createElement(WarningFilled16, {\n                className: \"\".concat(prefix, \"--list-box__invalid-icon\")\n              }), React.createElement(ListBox.Field, _extends({\n                id: id\n              }, getButtonProps({\n                disabled: disabled\n              })), selectedItem.length > 0 && React.createElement(ListBox.Selection, {\n                clearSelection: clearSelection,\n                selectionCount: selectedItem.length,\n                translateWithId: translateWithId\n              }), React.createElement(\"input\", _extends({\n                className: \"\".concat(prefix, \"--text-input\"),\n                \"aria-controls\": \"\".concat(id, \"__menu\"),\n                \"aria-autocomplete\": \"list\",\n                ref: function ref(el) {\n                  return _this2.inputNode = el;\n                }\n              }, getInputProps({\n                disabled: disabled,\n                id: id,\n                placeholder: placeholder,\n                onKeyDown: _this2.handleOnInputKeyDown\n              }))), inputValue && isOpen && React.createElement(ListBox.Selection, {\n                clearSelection: _this2.clearInputValue\n              }), React.createElement(ListBox.MenuIcon, {\n                isOpen: isOpen,\n                translateWithId: translateWithId\n              })), isOpen && React.createElement(ListBox.Menu, {\n                \"aria-label\": ariaLabel,\n                id: id\n              }, sortItems(filterItems(items, {\n                itemToString: itemToString,\n                inputValue: inputValue\n              }), {\n                selectedItems: {\n                  top: selectedItems,\n                  fixed: [],\n                  'top-after-reopen': _this2.state.topItems\n                }[_this2.props.selectionFeedback],\n                itemToString: itemToString,\n                compareItems: compareItems,\n                locale: locale\n              }).map(function (item, index) {\n                var itemProps = getItemProps({\n                  item: item\n                });\n                var itemText = itemToString(item);\n                var isChecked = selectedItem.filter(function (selected) {\n                  return isEqual(selected, item);\n                }).length > 0;\n                return React.createElement(ListBox.MenuItem, _extends({\n                  key: itemProps.id,\n                  isActive: isChecked,\n                  isHighlighted: highlightedIndex === index\n                }, itemProps), React.createElement(Checkbox, {\n                  id: itemProps.id,\n                  title: useTitleInItem ? itemText : null,\n                  name: itemText,\n                  checked: isChecked,\n                  disabled: disabled,\n                  readOnly: true,\n                  tabIndex: \"-1\",\n                  labelText: itemText\n                }));\n              })));\n            }\n          }));\n        }\n      });\n      return React.createElement(\"div\", {\n        className: wrapperClasses\n      }, title, !inline && helper, input);\n    }\n  }]);\n\n  return FilterableMultiSelect;\n}(React.Component);\n\n_defineProperty(FilterableMultiSelect, \"propTypes\", _objectSpread({}, sortingPropTypes, {\n  /**\n   * 'aria-label' of the ListBox component.\n   */\n  ariaLabel: PropTypes.string,\n\n  /**\n   * Disable the control\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Specify a custom `id`\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * We try to stay as generic as possible here to allow individuals to pass\n   * in a collection of whatever kind of data structure they prefer\n   */\n  items: PropTypes.array.isRequired,\n\n  /**\n   * Allow users to pass in arbitrary items from their collection that are\n   * pre-selected\n   */\n  initialSelectedItems: PropTypes.array,\n\n  /**\n   * Helper function passed to downshift that allows the library to render a\n   * given item to a string label. By default, it extracts the `label` field\n   * from a given item to serve as the item label in the list.\n   */\n  itemToString: PropTypes.func,\n\n  /**\n   * Specify the locale of the control. Used for the default `compareItems`\n   * used for sorting the list of items in the control.\n   */\n  locale: PropTypes.string,\n\n  /**\n   * `onChange` is a utility for this controlled component to communicate to a\n   * consuming component what kind of internal state changes are occuring.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Generic `placeholder` that will be used as the textual representation of\n   * what this field is for\n   */\n  placeholder: PropTypes.string.isRequired,\n\n  /**\n   * Specify title to show title on hover\n   */\n  useTitleInItem: PropTypes.bool,\n\n  /**\n   * `true` to use the light version.\n   */\n  light: PropTypes.bool,\n\n  /**\n   * Is the current selection invalid?\n   */\n  invalid: PropTypes.bool,\n\n  /**\n   * If invalid, what is the error?\n   */\n  invalidText: PropTypes.string,\n\n  /**\n   * Initialize the component with an open(`true`)/closed(`false`) menu.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Specify feedback (mode) of the selection.\n   * `top`: selected item jumps to top\n   * `fixed`: selected item stays at it's position\n   * `top-after-reopen`: selected item jump to top after reopen dropdown\n   */\n  selectionFeedback: PropTypes.oneOf(['top', 'fixed', 'top-after-reopen']),\n\n  /**\n   * Callback function for translating ListBoxMenuIcon SVG title\n   */\n  translateWithId: PropTypes.func,\n\n  /**\n   * Additional props passed to Downshift\n   */\n  downshiftProps: Downshift.propTypes\n}));\n\n_defineProperty(FilterableMultiSelect, \"defaultProps\", {\n  ariaLabel: 'Choose an item',\n  compareItems: defaultCompareItems,\n  disabled: false,\n  filterItems: defaultFilterItems,\n  initialSelectedItems: [],\n  itemToString: defaultItemToString,\n  locale: 'en',\n  sortItems: defaultSortItems,\n  light: false,\n  open: false,\n  selectionFeedback: 'top-after-reopen'\n});\n\nexport { FilterableMultiSelect as default };","map":null,"metadata":{},"sourceType":"module"}